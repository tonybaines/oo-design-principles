Problems with inheritance
* It breaks encapsulation - subclasses have access to protected implementation details and members
* It creates high coupling - by definition, you can't have a subclass without it's parent(s), and changes to the parent necessitate changes to the subclasses
* Comprehension is harder - understanding which implementation a subclass uses

h2. Example


pre.. Animals
   |- Mammals
   |    |- Eutheria 
   |    |     |- Primates
   |    |     |     |- Apes
   |    |     |     |   |- Humans
   |    |     |     |
   |    |     |     |- Monkeys
   |    |
   |    |- Cetacea
   |    |     |- Dolphins
   |    |
   |    |- Carnivora
   |          |- Bears
   |
   |- Metatheria (marsupials)
   |
   ...


p. Operations:
* @move()@ - walking (two/four legs), running, swimming


* What is common behaviour between Mammals, Apes, Monkeys?
* What about @Dolphin@
** the hierarchy is starting to look untidy
* duplication/distribution of test logic of test logic
** one test for each subclass - what about inherited logic?

* State changes?
** @isThirsty()@ / @setThirsty()@ / @drink()@

* duplication of implementations
** can pull out to helpers e.g. @new WalkingAbility()@
** leads on to a refactoring into composition
*** @Factory@ required for dependency injection
*** Decoration may be more suitable for other models e.g.
pre.. BankAccount
	|- SimpleAccount (overdraft allowed)
	|- SuperSaverAccount (no overdraft)

p. @SuperSaverAccount@ decorates @SimpleAccount@, wrapping the call to @debit()@ and throwing an exception if insufficient funds

* improves testability - just test the behaviour in the composable class
* Can move on to discuss mixin composition (walk, climb, swim, ...)



h3. Further reading

An excellent article "here":http://openlandscape.wordpress.com/2010/05/11/taking-another-look-at-inheritance/